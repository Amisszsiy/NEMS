@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model SummaryViewModel;
@{
    //Used for looping through empty/leave days along with workday
    DateTime countDay;
    DateTime countUntil;

    if(Model.From.HasValue)
    {
        countDay = Model.From.Value;
        countUntil = Model.Until.Value;
    }
    else
    {
        //If no value/page start, no conditions are met to loop empty days
        countDay = DateTime.Today;
        //-1 day in order to hide 1 auto generate leave row
        countUntil = DateTime.Today.AddDays(-1);
    }
}
<h1>Work Time Summary</h1>
<hr />
<div class="container">
    <div class="align-items-start">
        <div class="row">
            <div class="col-3">
                <form method="GET" asp-controller="WorkTime" asp-action="Index">
                    <select asp-for="User" class="form-select my-2">
                        @foreach(var user in Model.Users)
                        {
                            <option value="@user.Id">@user.FirstName</option>
                        }
                    </select>
                    <input asp-for="From" class="form-control my-2" type="date" />
                    <input asp-for="Until" class="form-control my-2" type="date" />
                    <button class="btn btn-primary" type="submit">Submit</button>
                </form>

            </div>
            <div class="col-9">
                <table class="table table-striped table-hover table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Date</th>
                            <th scope="col">Clock in</th>
                            <th scope="col">Clock in (Rounded)</th>
                            <th scope="col">Clock out</th>
                            <th scope="col">Clock out (Rounded)</th>
                            <th scope="col">Work Time</th>
                            <th scope="col">Over Time</th>
                            <th scope="col">Early Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var row in Model.TimeTables)
                        {
                            //countDay is less than rowDay assuming there's leave until this rowDay
                            //thus, looping through gap to generate leave row
                            while(row.date.Ticks > countDay.Ticks)
                                {
                                <tr style="background-color:@(countDay.Date.DayOfWeek==DayOfWeek.Saturday||countDay.Date.DayOfWeek==DayOfWeek.Sunday ? "#FFCCCB" : "")">
                                    <td>@countDay.ToShortDateString()</td>
                                    <td colspan="6">Leave</td>
                                    <td>
                                        <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#addModal" data-bs-date="@countDay.ToString("s")">Fill</button>
                                    </td>
                                </tr>
                                countDay = countDay.AddDays(1);
                                }

                                //If countDay and rowDay are equal, normally print workday row
                                //Highlight red if clock in or out is missing by checking its default ticks value aka 0
                            if (row.date.Ticks == countDay.Ticks)
                            {
                                <tr data-bs-toggle="modal" data-bs-target="#editModal"
                            data-bs-id="@row.id"
                            data-bs-date="@row.date.ToShortDateString()"
                            data-bs-in="@row.clockin.ToString("s")"
                            data-bs-out="@row.clockout.ToString("s")"
                                style="background-color:@(row.date.DayOfWeek==DayOfWeek.Saturday||row.date.DayOfWeek==DayOfWeek.Sunday ? "#FFCCCB" : "")">
                                    <td>@row.date.ToShortDateString()</td>
                                    <td style="color:@(row.clockin.Ticks==0 ? "red" : "")">@row.clockin.ToShortTimeString()</td>
                                    <td>@row.rClockin.ToShortTimeString()</td>
                                    <td style="color:@(row.clockout.Ticks==0 ? "red" : "")">@row.clockout.ToShortTimeString()</td>
                                    <td>@row.rClockout.ToShortTimeString()</td>
                                    <td>@String.Format("{0:N2}",row.worktime)</td>
                                    <td>@String.Format("{0:N2}",row.ot)</td>
                                    <td>@String.Format("{0:N2}",row.et)</td>
                                </tr>
                                countDay = countDay.AddDays(1);
                            }
                            else
                            {
                                <tr>
                                    <td>@countDay.ToShortDateString()</td>
                                    <td colspan="7">Duplicated</td>
                                </tr>
                            }
                        }

                        @while(countDay.Ticks <= countUntil.Ticks)
                        {
                            //Loop over when Until date is met
                            <tr style="background-color:@(countDay.Date.DayOfWeek==DayOfWeek.Saturday||countDay.Date.DayOfWeek==DayOfWeek.Sunday ? "#FFCCCB" : "")">
                                    <td>@countDay.ToShortDateString()</td>
                                    <td colspan="6">Leave</td>
                                    <td>
                                        <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#addModal" data-bs-date="@countDay.ToString("s")">Fill</button>
                                    </td>
                                </tr>
                                countDay = countDay.AddDays(1);
                                }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="POST" asp-controller="WorkTime" asp-action="editClock">
                <div class="modal-body">
                    <input type="hidden" class="id" asp-for="Clock.id">
                    <input type="hidden" asp-for="User" />
                    <input type="hidden" asp-for="From" />
                    <input type="hidden" asp-for="Until" />
                    <div class="mb-3">
                        <label class="form-label">Clock in</label>
                        <input type="datetime-local" step="any" class="in form-control" asp-for="Clock.clockin" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Clock out</label>
                        <input type="datetime-local" step="any" class="out form-control" asp-for="Clock.clockout" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary" name="submit" value="edit">Edit</button>
                    <button type="submit" class="btn btn-danger" name="submit" value="delete">Delete</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    var editModal = document.getElementById('editModal')
    editModal.addEventListener('show.bs.modal', function (event) {
        // Button that triggered the modal
        var tr = event.relatedTarget
        // Extract info from data-bs-* attributes
        var id = tr.getAttribute('data-bs-id')
        var date = tr.getAttribute('data-bs-date')
        var cin = tr.getAttribute('data-bs-in')
        var out = tr.getAttribute('data-bs-out')
        // If necessary, you could initiate an AJAX request here
        // and then do the updating in a callback.
        //
        // Update the modal's content.
        var editDate = editModal.querySelector('.modal-title')
        var editId = editModal.querySelector('.modal-body .id')
        var editIn = editModal.querySelector('.modal-body .in')
        var editOut = editModal.querySelector('.modal-body .out')

        editDate.textContent = 'Edit clock time of ' + date
        editId.value = id
        editIn.value = cin
        editOut.value = out
    })
</script>

        <!--Add time modal-->

<div class="modal fade" id="addModal" tabindex="-1" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" asp-controller="WorkTime" asp-action="addClock">
                <div class="modal-body">
                    <input type="hidden" asp-for="User" />
                    <input type="hidden" asp-for="From" />
                    <input type="hidden" asp-for="Until" />
                    <div class="my-2">
                        <input class="in form-control" type="datetime-local" step="any" asp-for="Clock.clockin" />
                    </div>
                    <div class="my-2">
                        <input class="out form-control" type="datetime-local" step="any" asp-for="Clock.clockout" />
                    </div>
                </div>
            <div class="modal-footer">
                <button class="btn btn-primary" type="submit">Submit</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
            </form>
        </div>
    </div>
</div>

<script>
    var addModal = document.getElementById('addModal')
    addModal.addEventListener('show.bs.modal', function (event) {

        var tr = event.relatedTarget

        var date = tr.getAttribute('data-bs-date')

        var addDate = addModal.querySelector('.modal-title')
        var addIn = addModal.querySelector('.modal-body .in')
        var addOut = addModal.querySelector('.modal-body .out')

        addDate.textContent = 'Add clock time of ' + date.replace("T00:00:00","")
        addIn.value = date.replace("T00:00:00", "T08:30:00")
        addOut.value = date.replace("T00:00:00", "T17:30:00")

    })
</script>